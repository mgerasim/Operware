{"version":3,"sources":["webpack:///src/app/@core/services/configuration.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/@core/models/configuration.model.ts","webpack:///src/app/menu/menu-organization/menu-organization.component.html","webpack:///src/app/menu/menu-organization/menu-organization.component.ts","webpack:///src/app/menu/menu.component.html","webpack:///src/app/menu/menu.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ConfigurationService","httpClient","defaultHeaders","id","headers","this","observe","reportProgress","get","configuration","post","responseType","put","routes","path","loadChildren","then","m","ConfigurationCenterModule","OperatorsCenterModule","ServiceCenterModule","AppRoutingModule","forRoot","preloadingStrategy","enableTracing","Configuration","configurationService","popupVisible","organization","res","console","log","add","toPromise","localStorage","setItem","toString","location","reload","error","e","message","item","isNullOrUndefined","getItem","isEmptyOrganization","titleOrganization","items","title","link","expanded","children","subscribe","configurations","find","x","AppComponent","AppModule","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module","exports"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport {Configuration} from '../models/configuration.model';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n\n  public defaultHeaders = new HttpHeaders();\n\n  constructor(private httpClient: HttpClient) { }\n\n  public delete(id: number): Observable<any> {\n\n    const headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json',\n      'text/json',\n      'application/xml',\n      'text/xml'\n    ];\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.delete(`/api/configuration/${id}`,\n      {\n        headers: headers\n      }\n    );\n  }\n\n  public getById(id: number, observe?: 'body', reportProgress?: boolean): Observable<Configuration>;\n  public getById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Configuration>>;\n  public getById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Configuration>>;\n  public getById(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    const headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json',\n      'text/json',\n      'application/xml',\n      'text/xml'\n    ];\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Configuration>(`/api/configuration/${id}`,\n      {\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  public get(observe?: 'body', reportProgress?: boolean): Observable<Configuration[]>;\n  public get(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Configuration[]>>;\n  public get(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Configuration[]>>;\n  public get(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    const headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json',\n      'text/json',\n      'application/xml',\n      'text/xml'\n    ];\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Configuration[]>(`/api/configuration`,\n      {\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  public add(configuration: Configuration): Observable<Configuration> {\n\n    const headers = this.defaultHeaders;\n\n    return this.httpClient.post<Configuration>(`/api/configuration`, configuration,\n      {\n        observe: 'body',\n        responseType: 'json'\n      }\n    );\n  }\n\n  public save(configuration: Configuration): Observable<Configuration> {\n\n    const headers = this.defaultHeaders;\n\n    return this.httpClient.put<Configuration>(`/api/configuration`, configuration,\n      {\n        observe: 'body',\n        responseType: 'json'\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {Routes, RouterModule, PreloadAllModules} from '@angular/router';\nimport {CallbacksComponent} from './operators-center/callbacks/callbacks.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'configuration',\n    loadChildren: () => import('./configuration-center/configuration-center.module').then(m => m.ConfigurationCenterModule)\n  },\n  {\n    path: 'calls',\n    loadChildren: () => import('./operators-center/operators-center.module').then(m => m.OperatorsCenterModule)\n  },\n  {\n    path: 'service',\n    loadChildren: () => import('./service-center/service-center.module').then(m => m.ServiceCenterModule)\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    preloadingStrategy: PreloadAllModules,\n    enableTracing: true\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export class Configuration {\n  id: number;\n\n  createdAt: Date;\n  updatedAt: Date;\n  AMI_username: string;\n  AMI_password: string;\n  AMI_server: string;\n  AMI_port: number;\n  authKey: string;\n  baseUrl: string;\n  defaultResponsibles: string;\n\n  state: string;\n\n  incomingStartCallEvent: string;\n  incomingStartCallField: string;\n  incomingEndCallEvent: string;\n  incomingEndCallField: string;\n  incomingAnswerCallEvent: string;\n  incomingAnswerCallField: string;\n  incomingStartCallValue: string;\n  incomingEndCallValue: string;\n  incomingAnswerCallValue: string;\n  incomingStartCallEvent2: string;\n  incomingStartCallField2: string;\n  incomingEndCallEvent2: string;\n  incomingEndCallField2: string;\n  incomingAnswerCallEvent2: string;\n  incomingAnswerCallField2: string;\n  incomingStartCallValue2: string;\n  incomingEndCallValue2: string;\n  incomingAnswerCallValue2: string;\n\n  callbackTimeout: string;\n  callbackContext: string;\n\n  uniqueFieldName: string;\n  titleOrganization: string;\n}\n","<div ngbDropdown class=\"d-inline-block\">\n  <button class=\"btn btn-outline-primary\" id=\"dropdownBasic1\" ngbDropdownToggle>{{title}}</button>\n  <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\n    <button ngbDropdownItem (click)=\"add()\">Добавить организацию</button>\n    <div class=\"dropdown-divider\"></div>\n    <button ngbDropdownItem *ngFor=\"let item of organizations\" (click)=\"change(item)\">{{ item.titleOrganization === null ? 'Не указано' : item.titleOrganization }}\n    </button>\n  </div>\n</div>\n\n<dx-popup [title]=\"'Добавление'\"\n          [(visible)]=\"popupVisible\">\n  <div *dxTemplate=\"let data of 'content'\">\n    <nb-card>\n      <nb-card-body>\n        <dx-form [formData]=\"organization\" colCount=\"1\">\n\n            <dxi-item dataField=\"titleOrganization\">\n              <dxo-label text=\"Наименование организации\"></dxo-label>\n            </dxi-item>\n        </dx-form>\n      </nb-card-body>\n      <nb-card-footer>\n        <dx-button stylingMode=\"contained\"\n                   type=\"success\"\n                   text=\"Сохранить\"\n                   (click)=\"save()\">\n        </dx-button>\n      </nb-card-footer>\n    </nb-card>\n\n  </div>\n</dx-popup>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {isNullOrUndefined} from 'util';\nimport {Configuration} from '../../@core/models/configuration.model';\nimport {ConfigurationService} from '../../@core/services/configuration.service';\nimport notify from 'devextreme/ui/notify';\n\n@Component({\n  selector: 'app-menu-organization',\n  templateUrl: './menu-organization.component.html',\n  styleUrls: ['./menu-organization.component.scss']\n})\nexport class MenuOrganizationComponent implements OnInit {\n  @Input() organization: Configuration;\n  @Input() organizations: Configuration[];\n  get isEmptyOrganization(): boolean {\n    return isNullOrUndefined(localStorage.getItem('organization')) || localStorage.getItem('organization') === 'null';\n  }\n  get title(): string {\n    return this.isEmptyOrganization ? 'Выберите организацию' : this.organization.titleOrganization;\n  }\n  popupVisible = false;\n\n  constructor(private configurationService: ConfigurationService) { }\n\n\n  ngOnInit() {\n\n  }\n\n  add() {\n    this.popupVisible = true;\n    this.organization = new Configuration();\n  }\n\n  async save() {\n    try {\n      console.log(this.organization);\n      const res = await this.configurationService.add(this.organization).toPromise();\n      console.log(res);\n      localStorage.setItem('organization', res.id.toString());\n      this.popupVisible = false;\n      location.reload();\n\n    } catch (e) {\n      console.error(e);\n      notify(e.message, 'error');\n    }\n  }\n\n  change(item: Configuration) {\n    console.log(item);\n    localStorage.setItem('organization', item.id.toString());\n    location.reload();\n  }\n}\n","<app-menu-organization [organization]=\"configuration\" [organizations]=\"configurations\">\n\n</app-menu-organization>\n<nb-menu *ngIf=\"configuration\" [items]=\"items\">\n</nb-menu>\n","import { Component, OnInit } from '@angular/core';\nimport {NbMenuItem} from '@nebular/theme';\nimport {ConfigurationService} from '../@core/services/configuration.service';\nimport {Configuration} from '../@core/models/configuration.model';\nimport {isNullOrUndefined} from \"util\";\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent implements OnInit {\n  items: NbMenuItem[] = [\n    {\n      title: 'Звонки',\n      link: '/calls',\n    },\n    {\n      title: 'События',\n      link: '/calls/events',\n    },\n    {\n      title: 'Конфигурация',\n      expanded: true,\n      children: [\n        {\n          title: 'AMI подключение',\n          link: '/configuration',\n        },\n        {\n          title: 'Привязка событий',\n          link: '/configuration/event-binding',\n        },\n        {\n          title: 'Переменные',\n          link: '/configuration/variables',\n        },\n        {\n          title: 'Обратный звонок',\n          link: '/configuration/callback',\n        }\n      ],\n    },\n    {\n      title: 'Обслуживание',\n      link: '/service',\n    },\n    {\n      title: 'Обратные звонки',\n      link: '/calls/callbacks',\n    }\n  ];\n\n  configurations: Configuration[];\n  configuration: Configuration;\n  constructor(private configurationService: ConfigurationService) { }\n\n  get isEmptyOrganization(): boolean {\n    return isNullOrUndefined(localStorage.getItem('organization')) || localStorage.getItem('organization') === 'null';\n  }\n\n  ngOnInit() {\n    this.configurationService.get().subscribe(configurations => {\n      this.configurations = configurations;\n      if (!this.isEmptyOrganization) {\n        this.configuration = this.configurations.find(x => x.id.toString() === localStorage.getItem('organization'));\n        if (!this.configuration) {\n          localStorage.setItem('organization', null);\n        }\n      }\n    });\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Operware';\n}\n","<nb-layout>\n  <nb-sidebar>\n    <app-menu></app-menu>\n  </nb-sidebar>\n\n  <nb-layout-column>\n    <router-outlet></router-outlet>\n  </nb-layout-column>\n</nb-layout>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {NbCardModule, NbLayoutModule, NbMenuModule, NbSidebarModule, NbSidebarService, NbThemeModule} from '@nebular/theme';\nimport { MenuComponent } from './menu/menu.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport { MenuOrganizationComponent } from './menu/menu-organization/menu-organization.component';\nimport {DxButtonModule, DxFormModule, DxPopupModule} from 'devextreme-angular';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuComponent,\n    MenuOrganizationComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    NbThemeModule.forRoot(),\n    AppRoutingModule,\n    NbLayoutModule,\n    NbSidebarModule,\n    NgbModule,\n    NbMenuModule.forRoot(),\n    DxPopupModule,\n    NbCardModule,\n    DxFormModule,\n    DxButtonModule,\n  ],\n  providers: [\n    NbSidebarService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}