{"version":3,"sources":["webpack:///src/app/@core/services/call.service.ts"],"names":["CallService","httpClient","defaultHeaders","observe","reportProgress","headers","httpHeaderAccepts","consumes","get","configurationId","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaA,W;AAIX,2BAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAFb,aAAAC,cAAA,GAAiB,IAAI,gEAAJ,EAAjB;AAEwC;;;;8BAKkB;AAAA,cAAtDC,OAAsD,uEAAvC,MAAuC;AAAA,cAA/BC,cAA+B,uEAAL,KAAK;AAE/D,cAAMC,OAAO,GAAG,KAAKH,cAArB,CAF+D,CAI/D;;AACA,cAAMI,iBAAiB,GAAa,CAClC,kBADkC,EAElC,WAFkC,EAGlC,iBAHkC,EAIlC,UAJkC,CAApC,CAL+D,CAY/D;;AACA,cAAMC,QAAQ,GAAa,EAA3B;AAEA,iBAAO,KAAKN,UAAL,CAAgBO,GAAhB,eACL;AACEH,mBAAO,EAAEA,OADX;AAEEF,mBAAO,EAAEA,OAFX;AAGEC,0BAAc,EAAEA;AAHlB,WADK,CAAP;AAOD;;;kCAEgBK,e,EAAyB;AAEtC,cAAMJ,OAAO,GAAG,KAAKH,cAArB,CAFsC,CAIxC;;AACA,cAAMI,iBAAiB,GAAa,CAClC,kBADkC,EAElC,WAFkC,EAGlC,iBAHkC,EAIlC,UAJkC,CAApC,CALwC,CAYxC;;AACA,cAAMC,QAAQ,GAAa,EAA3B;AAEA,iBAAO,KAAKN,UAAL,gCAAqCQ,eAArC,GACL;AACEJ,mBAAO,EAAEA;AADX,WADK,CAAP;AAMD;;;;;;;uBAtDUL,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVU,oBAAU,EAAE;AADF,S;AAGY,Q","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Call} from '../models/call.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CallService {\n\n  public defaultHeaders = new HttpHeaders();\n\n  constructor(private httpClient: HttpClient) { }\n\n  public get(observe?: 'body', reportProgress?: boolean): Observable<Call[]>;\n  public get(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Call[]>>;\n  public get(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Call[]>>;\n  public get(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n    const headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json',\n      'text/json',\n      'application/xml',\n      'text/xml'\n    ];\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.get<Call[]>(`/api/calls`,\n      {\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  public deleteAll(configurationId: number) {\n\n      const headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    const httpHeaderAccepts: string[] = [\n      'application/json',\n      'text/json',\n      'application/xml',\n      'text/xml'\n    ];\n\n    // to determine the Content-Type header\n    const consumes: string[] = [];\n\n    return this.httpClient.delete(`/api/calls/${configurationId}`,\n      {\n        headers: headers\n      }\n    );\n\n  }\n}\n"]}